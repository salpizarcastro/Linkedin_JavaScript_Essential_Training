https://www.linkedin.com/learning/javascript-essential-training-3/arithmetic-operators-and-math?u=81030314

HTML + CSS + JS
HTML content layer
CSS presentation
Javascript interactive layer


https://babeljs.io - transpiler

jQuery simplifies the use of JS

Frameworks: Angular, React, Vue etc open source run in the browser and only pull data from the server.

Node.js use JS as a server side programing languages use for advance operations and applications.

Browser development tools (chrome):
  right click and inspect
  cmd + opt + i
  cmd + opt + j to open the console and  type js commands like:
    alert("hello world!")
    var date = new Date()
      alert("today is " + date)
    console.log("today is " + date)

Adding content from console into 02_02 file
  document.body.innerHTML = "<h1>today is " + date + "</h1>"
  document.body.innerHTML = "<h1> Today is " + (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear() + "</h1>"

Rules:
    1. JS is case sensitive
    2. camelCase for naming convention
    2.1 Variables start with lowercase and cannot start with a number (e.g. var greenDuck)
    2.2 Objects and classes start with upper letter (e.g. Date())
    2.3 Constants are all caps (e.g. cons = CONSTANTUPPERCASE)
    3. Whitespace matters to humans no JS
    4. End each statement with Semicolon (to make it readable)
    5. Use comments liberally
      // one line
      /* multiple lines */

---Some basics---
02_03
inline js (inside HTML) <script></script>
in head, body or after body it all depends when it should run
before contents are rendered add them to header
  <script>
    var date = new Date()
    document.body.innerHTML = "<h1> Today is " + (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear() + "</h1>";
  </script>
inner is fine for 1 page and simple

02_04
to call a JS
  <script src = "script.js"></script>

JS render blocking means that browser stops rendering till it downloads and executes js file - solved with HTTP2
  <script src = "script.js" async></script> //download is parallel and then executes
  <script src = "script.js" defer></script> //download is parallel and executed as the very end

---Working with data---
Variable is a generic container to hold data (int, list, array, string, anything!)
  var myVariable;
  var a;
  var b;
  a = 4;
  b = 5;
  var sum = a + b;
  var a, b, sum;
  var a = 4, b = 5, sum = a + b;
  you can call variables from the browser console

Data types
  Numeric numbers and integers (integer, decimal, negatives, etc)
  String letters or symbols between quotation marks "" or '' \"escaped\"
  Boolean true - false (lowercase)
  Null absence of object value (lowercase)
  Undefined variable without content

  console.log(typeof variableName) to get variable type

Operators
  = assignment
  == condition of equality
  === absolute string equality
  != or !==
  Shorthand math +=, -=, *=, /=, ++, --
    a += 4 >> a = a + 4
    a++    >> a = a + 1 after
    ++a    >> before

    'string' + 'other string' = 'stringotherstring'
    4 + '5' = '45'
    4 - '3' = 1 >> its converter to number
    4 + 'xxx' = NaN

Conditions and Logic
  if (condition){
    code block
  } else {
    code block for something else
  }

shortcut or ternary operator
  condition ? true : false
  a == b ? code block : code block for something else

if (a == b && c == d) >> and
if (a == b || c == d) >> or

XOR
  if((a == b || c == d) && ((a == b) != (c == d)))

Arrays (0 index based)
  var letters;
  letters = ['a', 'b', 'c'];
  or
  letters = new Array('a', 'b', 'c');

  var allobjects;
  allobjects = ['a', 100, true];
  allobject[1] = 200
  allobjects = ['a', 200, true];

  Functions
    array.lenght()
    array.reverse()
    array.shift() >> removes first item
    array.unshift('first', 'second') >> adds items at the beggining
    array.push() >> adds at the end
    array.splice(position, item to remove) >> remove items
    array.slice() >> creates a copy
    array.indexOf(item, index to start from) >> search for first item
    array.join(separator) >> returns a string

Functions
  Name functions
    function multiply (a, b){
      var result = a * b;
      console.log(result);
      return result;
    }

  Anonymous functions
    var divide = function(){
      var result = 4 / 2;
      console.log(result);
      return result;
    }
    divide(); >> the variable must be called as a function

  Immediately invoked functions
  var firstVariable = 7/9;
  var secondVariable = 13/25;
  var divide = (function(a, b){
    var result = 4 / 2;
    console.log(result);
    return result;
  })(firstVariable, secondVariable)
  divide; >> if we want to assigned the returned value to the variable right away.

Variable Scope
Global variable = defined in the root of the script
Local variable = inside a function
variables without "var" prefix can be created as Global - DON'T

const: Constants, don't change
let: Block (if/loop/etc) scope variable, smaller than var
    function logScope(){
      var localVar = 2;
      if(localVar){
        let localVar = 'Im different!';
        console.log('nested LocalVar:', localVar);
      }
      console.log("logScope localVar", localVar);
    }
    logScope();

Objects
  var course = {
    title: 'My Title',
    instructor: 'Mr Instructor',
    level: 1,
    published: true,
    views: 0,
    updateViews: function(){
      return ++course.views;
    }
  }

  console.log(course);
  console.log(course.views);
  course.updateViews();

Object constructors 04_10
  function Course(title, instructor, level, published, views){
    this.title = title;
    this.instructor = instructor;
    this.level = level;
    this.published = published;
    this.views = views;
    this.updateViews = function() {
        return ++course.views;
    };
  }

  //var course01 = new Course('My Title', 'Mr Instructor', 1, true, 0);
  //var course02 = new Course('My Title JS', 'Mr Instructor Jr', 1, true, 66);
  //console.log(course01);
  //console.log(course02);

  var courses =  [
    new Course('My Title', 'Mr Instructor', 1, true, 0),
    new Course('My Title JS', 'Mr Instructor Jr', 1, true, 66)
  ] >> to put everything in an array

Dot vs Bracket notation
course.title   =   course['title']   >> both do the same but brackets my deal better with weird naming conventions.

Closure 04_12 (developer.mozilla.org/en/docs/Web/JavaScript/Closures)
function inside a function that relies on variables in the outside function to work.
  function doSomeMath() {
  	var a = 5;
  	var b = 4;
  	function multiply(){
  		var result = 4 * 5;
  		return result;
  	}
  	return multiply;
  }
  var theResult = doSomeMath();
  console.log(theResult());

BOM: Browser object model
DOM: The document object model inside the BOM which contains multiple nodes (HTML nodes)

BOM or window properties (developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)
window.innerHeight
window.innerWidth
window.open()
window.document() >> or just document

Targeting elements (developer.mozilla.org/en-US/docs/Web/API/document)
document.body;
document.title;
document.URL;
document.getElementById('ID');
document.getElementByClassName('class name');
document.getElementByTagName('tag name');

document.querySelector('.main-nav a'); >> returns the first element matching
  document.querySelector(".menu .has-children a")
document.querySelectorAll('.post-content p'); >> get all elements matching
  document.querySelectorAll(".menu li a, .social-nav li a")
  document.querySelectorAll(".social-nav a[href*='linkedin.com']")

. for class
# for ID

Access and change elements (developer.mozilla.org/en-US/docs/Web/API/element)
  document.querySelector('.main-title').innerHTML = 'new text here!!'
  document.querySelector('#showcase').id = 'slideshow' >> for IDs
  document.querySelector('.masthead') >> classes
  document.querySelector('.masthead').className
  document.querySelector(".masthead").classList >> when multiple
  document.querySelector(".masthead").classList[0]
  document.querySelector(".masthead").classList.add("new-class") >> add new class
  document.querySelector(".masthead").classList.remove("clear") >> remove existing class
  document.querySelector(".new-class").classList.toggle("masthead") >> remove (return false) and then add when called again (return true)
  document.querySelector(".new-class").classList.contains("masthead") >> checks if exists

Attributes 05_05
  - hasAttritbute
  - getAttribute
  - setAttribute(name, value)
  - removeAttribute(name)

  /*
  <div class="cta">
      <a href="#">Book Now!</a>
  </div><!-- .cta -->
  */
  const CTAELEMENT = document.querySelector(".cta a");
  if(CTAELEMENT.hasAttribute("target")){
    console.log(CTAELEMENT.getAttribute("target"));
  } else {
    CTAELEMENT.setAttribute("target", "_blank");
  }
  console.log(CTAELEMENT.attributes);
  //<a href="#" targer = "_blank">Book Now!</a>

Add DOM elements 05_06
  - Get an element
    const ELEM = document.querySelector(".main-title");
  - Set the inner HTML
    ELEM.innerHTML = "this is the new title"
  - Set the outer HTML
    ELEM.outerHTML = '<h1 class = "main-title"> this is the new title </h1>'
  Steps:
    1. create element >> .createElement()
    2. create text node that goes inside element >> createTextNode()
    3. add text node into element
    4. add element to the DOM tree >> appendChild()

    const FEATURE = document.querySelector(".featured-image");
    const THEIMAGE = FEATURE.querySelector("img");
    var altText = THEIMAGE.getAttribute("alt");
    var captionElement = document.createElement("figCaption");
    //var captionText = document.createTextNode(altText);
    //captionElement.appendChild(captionText);
    //console.log(captionElement);
    //FEATURE.appendChild(captionElement);
    //New
    captionElement.append(altText);
    FEATURE.append(captionElement);
    //
    THEIMAGE.setAttribute("alt", "");

Inline CSS (developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style)
  JS never writes to CSS properties
    document.querySelector(".cta a").style
    document.querySelector(".cta a").style.color = "green"
    document.querySelector(".cta a").style.backgroundColor = "blue"
    document.querySelector(".cta a").style.cssText = "padding: 1em; color: white; backgroundColor = red"
  Inline styles are actually attributes so all same methods work
    document.querySelector(".cta a").setAttribute("style", "padding: 1em; color: white; backgroundColor = red")

SVG Scalable Vector Graphics (https://www.w3schools.com/html/html5_svg.asp)

Clock project 06_02

DOM Events 07_03
  Browser level Events (developer.mozilla.org/en-US/docs/Web/Events)
    Load - finished loading
    Error - failed to loading
    Online / offline
    Resize
    Scroll
  DOM Events
    Focus - click, tabbed, etc
    Blur - loose focus, leaving form field, etc
    Reset / Submit - form specific
    Mouse events - click, mouseover, drag, drop, etc
  Other
    Media - audio, video playback
    Progress - monitor ongoing browser progress
    CSS transition events - transition start, run, end

    const CTA = document.querySelector(".cta a");
    const ALERT = document.querySelector("#booking-alert");
    CTA.classList.remove("hide");
    ALERT.classList.add("hide");
    function reveal(e){
      e.preventDefault();
      CTA.classList.toggle("hide");
      ALERT.classList.toggle("hide");
    }
    CTA.onclick = reveal;

    when using event listener you can stack multiple
    CTA.addEventListener("click", reveal, false);
    CTA.addEventListener("click", function(){console.log("button was clicked")}, false);

Typing speed tester 08_03

Loops
- break terminate the current loop
- continue terminate the current iteration of the loop

  for(var i = 0; i < 10; i++){
    code here
  }

  var i = 0;
  while(i < 10){
    code here
    i ++;
  }

  do{
      code here
  } while()


Validation and troubleshooting
- console additional features: developer.mozilla.org/en/docs/Web/API/console
  console.info
  console.error
- Sources tab in Chrome browser
  add break points in the code
  you can run line by line with the up and down arrows on the top menu of the right panel
  if hove over a variable you can actually see the values
- JSLink.com (extremely opinionated)
  you can copy&past the code there
- JSHint (more relaxed)
  Enable ES6
- NPM node package manager
- ESLint
  Command line tool
  for atom https://atom.io/packages/linter-eslint


Arrow functions =>

  var sumTotal = function(price, tax){
    return price * ((tax / 100) + 1);
  }
  console.log(sumTotal(6, 12));
same as
  var sumTotal = (price, tax) => price * ((tax / 100) + 1);
  console.log(sumTotal(6, 12));

JavaScript vs TypeScript?
  JS is the core
  ES2015 latest standard
  TypeScript is an abstraction layer on top of JS
  Angular, React, View, etc are frameworks that run on the client side browser
  These are single page applications.

Strings in ES2015 (ES6)
  Template literals - template Strings
  It actually honors 'enters' without doing /n

  console.log(a + ' divided by ' + b + ' is ' + (a / b) + '.')
    same as
  console.log(${a} divided by ${b} is ${a/b})

% modulus or remained
  11 % 3 = 2
  Good to know if a number is a prime

document.getElementByID() and document.getElementByClassName() are good if you have the actual ID or name
document.querySelector() and document.querySelectorAll() applies to any property
  document.querySelector('input[name="login"]') --> will return the first occurent


Whats next:
- https://developer.mozila.org/en-US/docs/Web/JavaScript
- JQuery essential training
- React.js essential training
